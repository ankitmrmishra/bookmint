"use server";

import { db } from "@/db/drizzle";
import { users } from "@/db/users.schema";
import { eq } from "drizzle-orm";

/**
 * --------------------------------------------------------------------
 * getUserByEmail
 * --------------------------------------------------------------------
 * @description
 * Retrieves a user from the database using their email address.
 * Primarily used by the Auth.js (NextAuth) adapter during Google OAuth
 * sign-in to check if a user already exists.
 *
 * @async
 * @function getUserByEmail
 *
 * @param {string} email - The email address associated with the user.
 *
 * @returns {Promise<object | null>}
 * Returns a user object if found, or `null` if no matching record exists.
 *
 * @example
 * const user = await getUserByEmail("jane.doe@gmail.com");
 * if (user) console.log("Welcome back,", user.name);
 *
 * @throws {Error} Logs and returns null on query failure.
 */
export const getUserByEmail = async (email: string) => {
  try {
    const data = await db
      .select()
      .from(users)
      .where(eq(users.email, email))
      .limit(1);

    return data[0] || null;
  } catch (error) {
    console.error("❌ [getUserByEmail] Database error:", error);
    return null;
  }
};

/**
 * --------------------------------------------------------------------
 * getUserById
 * --------------------------------------------------------------------
 * @description
 * Retrieves a user by their unique ID. Commonly used when hydrating the
 * session from Auth.js or when fetching user details via `session.user.id`.
 *
 * @async
 * @function getUserById
 *
 * @param {string} id - The unique user ID (UUID or string) generated by Auth.js.
 *
 * @returns {Promise<object | null>}
 * Returns a user record if found, otherwise `null`.
 *
 * @example
 * const currentUser = await getUserById(session.user.id);
 * console.log("Authenticated user:", currentUser);
 *
 * @throws {Error} Logs and returns null on query failure.
 */
export const getUserById = async (id: string) => {
  try {
    const data = await db.select().from(users).where(eq(users.id, id)).limit(1);

    return data[0] || null;
  } catch (error) {
    console.error("❌ [getUserById] Database error:", error);
    return null;
  }
};

/**
 * --------------------------------------------------------------------
 * createUser
 * --------------------------------------------------------------------
 * @description
 * Creates a new user entry in the database. This function is typically
 * invoked automatically by the Auth.js Drizzle adapter during the first
 * Google OAuth login when the user does not already exist in the database.
 *
 * @async
 * @function createUser
 *
 * @param {object} userData - The data for creating a new user record.
 * @param {string} userData.id - The unique user ID assigned by Auth.js.
 * @param {string} userData.email - The user’s verified email address.
 * @param {string | null} [userData.name] - The user’s display name (optional).
 * @param {string | null} [userData.image] - The user’s Google profile image URL (optional).
 * @param {string | null} [userData.username] - A unique username if available (optional).
 *
 * @returns {Promise<object | null>}
 * Returns the newly created user object or `null` if the creation fails.
 *
 * @example
 * const newUser = await createUser({
 *   id: "abc123",
 *   email: "john.doe@gmail.com",
 *   name: "John Doe",
 *   image: "https://lh3.googleusercontent.com/photo.jpg"
 * });
 *
 * console.log("Created new user:", newUser);
 *
 * @throws {Error} Throws error if insertion into database fails.
 */
export const createUser = async (userData: {
  id: string;
  email: string;
  name?: string | null;
  image?: string | null;
  username?: string | null;
}) => {
  try {
    const newUser = await db
      .insert(users)
      .values({
        id: userData.id,
        email: userData.email,
        name: userData.name || null,
        image: userData.image || null,
        username: userData.username || null,
      })
      .returning();

    return newUser[0] || null;
  } catch (error) {
    console.error("❌ [createUser] Error creating user:", error);
    throw error;
  }
};

/**
 * --------------------------------------------------------------------
 * updateUser
 * --------------------------------------------------------------------
 * @description
 * Updates an existing user’s profile information.
 * Ideal for user settings or editable profile pages.
 *
 * Only provided fields are updated — missing keys remain unchanged.
 *
 * @async
 * @function updateUser
 *
 * @param {string} id - The ID of the user to update.
 * @param {object} updateData - The user properties to update.
 * @param {string} [updateData.name] - The updated display name.
 * @param {string} [updateData.image] - The updated profile image URL.
 * @param {string} [updateData.username] - The updated username.
 * @param {string} [updateData.bio] - The updated biography text.
 *
 * @returns {Promise<object | null>}
 * Returns the updated user record, or `null` if the update fails or user doesn’t exist.
 *
 * @example
 * const updatedUser = await updateUser("abc123", {
 *   name: "Jane Doe",
 *   bio: "Full-stack developer and crypto enthusiast.",
 * });
 *
 * console.log("User updated:", updatedUser);
 *
 * @throws {Error} Logs and returns null on update failure.
 */
export const updateUser = async (
  id: string,
  updateData: Partial<{
    name: string;
    image: string;
    username: string;
    bio: string;
  }>
) => {
  try {
    const updated = await db
      .update(users)
      .set(updateData)
      .where(eq(users.id, id))
      .returning();

    return updated[0] || null;
  } catch (error) {
    console.error("❌ [updateUser] Error updating user:", error);
    return null;
  }
};
